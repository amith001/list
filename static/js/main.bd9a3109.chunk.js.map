{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["person","props","react_default","a","createElement","className","onClick","click","name","age","children","type","onChange","changed","value","App","state","persons","id","otherState","showPersons","nameChangedHandler","event","personIndex","_this","findIndex","p","Object","objectSpread","target","toConsumableArray","setState","deletePersonHandler","splice","togglePersonsHandler","doesShow","_this2","this","map","index","Person_Person","key","style","backgroundColor","font","border","padding","cursor","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAeeA,eAXA,SAAEC,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAAA,KAAGE,QAASL,EAAMM,OAAlB,OAA8BN,EAAMO,KAApC,aAAoDP,EAAMQ,IAA1D,eACAP,EAAAC,EAAAC,cAAA,SAAIH,EAAMS,UACVR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,SAAUX,EAAMY,QAASC,MAAOb,EAAMO,UCyEtDO,6MA9EbC,MAAQ,CACNC,QAAS,CACP,CAAEC,GAAI,QAASV,KAAM,QAASC,IAAK,IACnC,CAAES,GAAI,SAAUV,KAAM,SAAUC,IAAK,IACrC,CAAES,GAAI,SAAUV,KAAM,cAAeC,IAAK,MAE5CU,WAAY,mBACZC,aAAa,KAGfC,mBAAqB,SAAEC,EAAOJ,GAC5B,IAAMK,EAAcC,EAAKR,MAAMC,QAAQQ,UAAU,SAAAC,GAC/C,OAAOA,EAAER,KAAOA,IAGZlB,EAAM2B,OAAAC,EAAA,EAAAD,CAAA,GACPH,EAAKR,MAAMC,QAAQM,IAGxBvB,EAAOQ,KAAOc,EAAMO,OAAOf,MAE3B,IAAMG,EAAOU,OAAAG,EAAA,EAAAH,CAAOH,EAAKR,MAAMC,SAC/BA,EAAQM,GAAevB,EAEvBwB,EAAKO,SAAU,CAACd,QAASA,OAG3Be,oBAAsB,SAACT,GACrB,IAAMN,EAAOU,OAAAG,EAAA,EAAAH,CAAOH,EAAKR,MAAMC,SAC/BA,EAAQgB,OAAOV,EAAa,GAC5BC,EAAKO,SAAS,CAACd,QAASA,OAG1BiB,qBAAuB,WACrB,IAAMC,EAAWX,EAAKR,MAAMI,YAC5BI,EAAKO,SAAU,CAAEX,aAAce,6EAGvB,IAAAC,EAAAC,KASJpB,EAAU,KAiBd,OAfKoB,KAAKrB,MAAMI,cACdH,EACEf,EAAAC,EAAAC,cAAA,WACGiC,KAAKrB,MAAMC,QAAQqB,IAAI,SAACtC,EAAQuC,GAC/B,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,CACLjC,MAAO,kBAAM6B,EAAKJ,oBAAoBO,IACtC/B,KAAMR,EAAOQ,KACbC,IAAKT,EAAOS,IACZgC,IAAKzC,EAAOkB,GACZL,QAAS,SAACS,GAAD,OAAWc,EAAKf,mBAAmBC,EAAOtB,EAAOkB,WAOlEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UACEsC,MA9BQ,CACZC,gBAAiB,QACjBC,KAAM,UACNC,OAAQ,iBACRC,QAAS,MACTC,OAAQ,WA0BJzC,QAAS+B,KAAKH,sBAFhB,kBAGCjB,UAxES+B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bd9a3109.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Person.css';\r\n\r\nconst person = ( props ) => {\r\n    return (\r\n        <div className=\"Person\">\r\n            <p>change the user name if you desire!!</p>\r\n            <p onClick={props.click}>I'm {props.name} and I am {props.age} years old!</p>\r\n            <p>{props.children}</p>\r\n            <input type=\"text\" onChange={props.changed} value={props.name} />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default person;","import React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person';\n\nclass App extends Component {\n  state = {\n    persons: [\n      { id: 'asfa1', name: 'Amith', age: 24 },\n      { id: 'vasdf1', name: 'Ashish', age: 27 },\n      { id: 'asdf11', name: 'Raghavendra', age: 300 }\n    ],\n    otherState: 'some other value',\n    showPersons: false\n  }\n\n  nameChangedHandler = ( event, id ) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n    persons[personIndex] = person;\n\n    this.setState( {persons: persons} );\n  }\n\n  deletePersonHandler = (personIndex) => {\n    const persons = [...this.state.persons];\n    persons.splice(personIndex, 1);\n    this.setState({persons: persons});\n  }\n\n  togglePersonsHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState( { showPersons: !doesShow } );\n  }\n\n  render () {\n    const style = {\n      backgroundColor: 'white',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px',\n      cursor: 'pointer'\n    };\n\n    let persons = null;\n\n    if ( this.state.showPersons ) {\n      persons = (\n        <div>\n          {this.state.persons.map((person, index) => {\n            return <Person\n              click={() => this.deletePersonHandler(index)}\n              name={person.name} \n              age={person.age}\n              key={person.id}\n              changed={(event) => this.nameChangedHandler(event, person.id)} />\n          })}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Hi, I'm a React App</h1>\n        <h3>Person List</h3>\n        <button\n          style={style}\n          onClick={this.togglePersonsHandler}>Toggle Persons</button>\n        {persons}\n      </div>\n    );\n   \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}